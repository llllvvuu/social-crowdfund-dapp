{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","hooks/Balance.js","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Header.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NFTSmall.tsx","components/NFTLarge.tsx","views/DonationUI.tsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","ethers","require","useContractLoader","providerOrSigner","config","useState","contracts","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","a","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","address","Contract","abi","loadContracts","useContractReader","functionName","pollTime","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","utils","isAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","balance","setBalance","pollBalance","useCallback","getBalance","newBalance","useBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","body","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","BigNumber","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","suffix","icon","Header","subTitle","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","className","right","bottom","checked","isChecked","dark","light","randomColor","OUTER_CIRCLE","height","backgroundColor","borderRadius","INNER_CIRCLE","outerCircle","rank","innerCircle","NFTSmall","NFTLarge","currency","str","parts","split","slice","DonationUI","urlParams","URLSearchParams","search","referrer","get","campaignId","readContracts","contract","React","donationAmount","setDonationAmount","shareOpen","setShareOpen","donationValid","isNaN","Number","yourContribution","formatUnits","leaderboard","campaign","donated","hasGoal","goal","deadline","toString","getRank","donor","addrs","findIndex","addr","referrerRank","myRank","twitterLink","fbLink","newButton","donationBox","border","margin","marginBottom","toPrecision","percent","showInfo","donate","update","gasUsed","gas","AddressZero","TwitterOutlined","FacebookOutlined","textAlign","filter","map","i","marginRight","scores","admin","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","logo","connector","enable","App","_network","setInjectedProvider","clearCachedProvider","disconnect","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","response","newGasPrice","catch","useGasPrice","localChainId","selectedChainId","writeContracts","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","code","reason","setRoute","faucetAvailable","connection","Crowdfund","align","gutter","span","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","UNI"],"mappings":"+eAKe,SAASA,EAAWC,EAAUC,EAAIC,GAC/C,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WACR,GAAIJ,GAAMD,EAAU,CAClB,IAAMO,EAAW,SAAAC,GAGXN,GAAQA,EAAKO,OAAS,EACxBN,EAAcG,QAAd,MAAAH,EAAa,YAAYD,IAEzBC,EAAcG,WAMlB,OAFAN,EAASU,GAAG,QAASH,GAEd,WACLP,EAASW,IAAI,QAASJ,OAGzB,CAACP,IC3BS,SAASY,EAAUX,EAAIY,EAAOC,GAC3C,IAAMX,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVQ,EAAgB,CAClB,IAAME,EAAKC,aAJb,WACEb,EAAcG,YAGeO,GAC7B,OAAO,kBAAMI,cAAcF,OAE5B,CAACF,IAEJR,qBAAU,WACRJ,MACC,CAACa,I,qBCrBEI,EAAWC,EAAQ,IAAnBD,OA+BO,SAASE,EAAkBC,GAAgC,IAAdC,EAAa,uDAAJ,GACnE,EAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAoBJ,EAAOK,iBAAmBC,OAAOC,KAAKP,EAAOK,iBAAiBG,OAClFC,EAAsBT,EAAOK,iBAAmBC,OAAOI,OAAOV,EAAOK,iBAAiBG,OAsF5F,OApFAzB,qBAAU,WACR,IAAI4B,GAAS,EADC,4CAGd,8CAAAC,EAAA,0DACMb,GAAgD,qBAArBA,EADjC,oBAEIc,QAAQC,IAAR,qBAFJ,UASUf,GAA6D,oBAAlCA,EAAiBgB,aATtD,gCAUyBhB,EAAiBgB,eAV1C,OAUQC,EAVR,qBAaUpB,EAAOqB,OAAOC,SAASnB,GAEzBrB,GADAyC,EAASpB,GACSrB,SACTsC,GAAYA,EAAS7B,OAAS,GACvCgC,EAASpB,EAAiBqB,YAC1B1C,EAAWqB,IAEXoB,EAASpB,EACTrB,EAAWqB,GArBnB,UAwBoCrB,EAAS2C,aAxB7C,QAwBYC,EAxBZ,OA0BYC,EAAWvB,EAAOwB,SAAWF,EAAgBE,QAE/CC,EAAe,GACfC,EAAuB,GAC3B,IACED,EAAezB,EAAO2B,kBAAoB9B,EAAQ,KAClD,MAAO+B,GACPf,QAAQC,IAAIc,GAEd,IACEF,EAAuB1B,EAAO6B,mBAAqBhC,EAAQ,KAC3D,MAAO+B,GACPf,QAAQC,IAAIc,GAKd,GAFIE,EAAoB,GAEpBL,EAAaF,GACf,IAAWQ,KAAkBN,EAAaF,GACpCjB,OAAO0B,UAAUC,eAAeC,KAAKT,EAAaF,GAAWQ,KAC1D/B,EAAOmC,oBAAsBJ,IAAmB/B,EAAOmC,qBAC1DL,EAAiB,2BACZA,GACAL,EAAaF,GAAUQ,GAAgB7B,aAOhDwB,EAAqBH,KACvBO,EAAiB,2BAAQA,GAAsBJ,EAAqBH,GAAUrB,YAG1EkC,EAAe9B,OAAOC,KAAKuB,GAAmBO,QAAO,SAACC,EAAaC,GACvE,IAAMC,EACJxC,EAAOK,iBAAmBC,OAAOC,KAAKP,EAAOK,iBAAiBoC,SAASF,GACnEvC,EAAOK,gBAAgBkC,GACvBT,EAAkBS,GAAcG,QAEtC,OADAJ,EAAYC,GAAgB,IAAI3C,EAAO+C,SAASH,EAAUV,EAAkBS,GAAcK,IAAKzB,GACxFmB,IACN,IACC3B,GAAQR,EAAaiC,GApE/B,kDAsEMvB,QAAQC,IAAI,4BAAZ,MAtEN,2DAHc,sBA+Ed,OA/Ec,mCA6Ed+B,GAEO,WACLlC,GAAS,KAEV,CAACZ,EAAkBC,EAAOwB,QAASxB,EAAOmC,mBAAoB/B,EAAmBK,IAE7EP,ECpGM,SAAS4C,EAAkB5C,EAAWqC,EAAcQ,EAAcnE,EAAMoE,EAAUC,EAAWC,GAAW,IAAD,OAChHC,EAAiB,EACjBH,EACFG,EAAiBH,EACPA,GAA4B,kBAATpE,IAE7BuE,EAAiBvE,GAGnB,MAA0BqB,qBAA1B,mBAAOmD,EAAP,KAAcC,EAAd,KACA,EAA0BpD,oBAAS,GAAnC,mBAAOqD,EAAP,KAAcC,EAAd,KAEAxE,qBAAU,WACgB,oBAAbmE,GACTM,WAAWN,EAASO,KAAK,EAAML,GAAQ,KAExC,CAACA,EAAOF,IAEX,IAAMQ,EAAW,uCAAG,8BAAA9C,EAAA,oEAIZhC,GAAQA,EAAKO,OAAS,GAJV,kCAKG,EAAAe,EAAUqC,IAAcQ,GAAxB,oBAAyCnE,IAL5C,OAKd+E,EALc,OAMdJ,GAAS,GANK,yCAUGrD,EAAUqC,GAAcQ,KAV3B,QAUdY,EAVc,OAWdJ,GAAS,GAXK,QAaZN,GAAkC,oBAAdA,IACtBU,EAAWV,EAAUU,IAGnBA,IAAaP,GACfC,EAASM,GAlBK,kDAqBhB9C,QAAQC,IAAR,MArBgB,0DAAH,qDAiDjB,OAvBArC,EAAWyB,GAAaA,EAAUqC,IAAoC,IAAnBY,GAAwBjD,EAAUqC,GAAc7D,UAAU,WACvGwB,GAAaA,EAAUqC,IAAoC,IAAnBY,GAE1CO,OAKJpE,EAAS,sBACP,sBAAAsB,EAAA,sDACMV,GAAaA,EAAUqC,IAAiBY,EAAiB,GAE3DO,IAHJ,2CAMAP,EACAjD,GAAaA,EAAUqC,KAGX,IAAVe,GAAmBpD,GAAaA,EAAUqC,IAC5CmB,IAGKN,E,0CCxET,IAAMQ,EAAa,uCAAG,WAAOlF,EAAUgE,GAAjB,iBAAA9B,EAAA,0DAChB8B,IAAWmB,QAAMC,UAAUpB,GADX,0CAMWhE,EAASkF,cAAclB,GANlC,cAMVqB,EANU,gBAQcrF,EAASsF,YAAYD,GARnC,UAQVE,EARU,QAUZvB,GAAWmB,QAAMK,WAAWxB,KAAamB,QAAMK,WAAWD,GAV9C,0CAWPF,GAXO,iCAaTF,QAAMK,WAAWxB,IAbR,2DAeTmB,QAAMK,WAAWxB,IAfR,iCAkBb,GAlBa,0DAAH,wDAkDJyB,EA7BU,SAACzF,EAAUgE,GAClC,MAA8BzC,mBAASyC,GAAvC,mBAAO0B,EAAP,KAAgBC,EAAhB,KAyBA,OAtBAtF,qBAAU,WACR,IAAIuF,EAAQC,OAAOC,aAAaC,QAAQ,YAAc/B,IACtD4B,EAAQA,GAASI,KAAKC,MAAML,KAEfA,EAAMM,UAAYC,KAAKC,MAClCT,EAAWC,EAAMS,MACRrG,GACTkF,EAAclF,EAAUgE,GAASsC,MAAK,SAAAD,GAChCA,IACFV,EAAWU,GACXR,OAAOC,aAAaS,QAClB,YAAcvC,EACdgC,KAAKQ,UAAU,CACbN,UAAWC,KAAKC,MAAQ,KACxBC,gBAMT,CAACrG,EAAUgE,EAAS2B,IAEhBD,GChDT,IChBQxE,EAAWC,EAAQ,IAAnBD,OCkBR,IAkCeuF,EAlCO,SAACC,EAAkBC,GACvC,MAA4BpF,qBAA5B,mBAAOkB,EAAP,KAAemE,EAAf,KACMC,EDlBO,SAAyB7G,GACtC,IAAM8G,EAAM,iBAEZ,EAA4BvF,qBAA5B,mBAAOkB,EAAP,KAAemE,EAAf,KACA,EAAsCrF,qBAAtC,mBAAOwF,EAAP,KAAoBC,EAApB,KAEMrC,EAAW,SAAAD,GACf,IACEsC,EAAetC,GACfmB,OAAOC,aAAaS,QAAQO,EAAKpC,GACjC,MAAOuC,GACP9E,QAAQC,IAAI6E,KAwBhB,OApBA5G,qBAAU,WACR,IAAM6G,EAAYrB,OAAOC,aAAaC,QAAQe,GAC9C,GAAKI,EAMHvC,EAASuC,OANK,CACd/E,QAAQC,IAAI,wBACZ,IACM+E,EADajG,EAAOkG,OAAOC,eACNC,WAC3B3C,EAASwC,MAIV,IAEH9G,qBAAU,WACR,GAAI0G,GAAe/G,EAAU,CAE3B,IAAMuH,EADG,IAAIrG,EAAOkG,OAAOL,GACJS,QAAQxH,GAC/B4G,EAAUW,MAEX,CAACR,EAAa/G,IAEVyC,ECjBcgF,CAAgBd,GA6BrC,OA3BAe,mBAAQ,WACN,GAAIhB,EAAkB,CACpBvE,QAAQC,IAAI,wCACZ,IAAMuF,EAAiBjB,EAAiBkB,YAAclB,EAAiBhE,YAAcgE,EACrFE,EAAUe,QACL,GAAKhB,EACP,CACH,GAAId,OAAOgC,SAASC,UAAYjC,OAAOgC,SAASC,SAASC,QAAQ,QAAU,EAAG,CAC5E,IACIC,EADEC,EAAapC,OAAOgC,SAASK,KAAKC,QAAQ,IAAK,IAErD,GAA0B,KAAtBF,EAAWxH,QAAuC,KAAtBwH,EAAWxH,OAAe,CACxD0B,QAAQC,IAAI,wCACZ4F,EAAQC,EACRpC,OAAOuC,QAAQC,UAAU,GAAI,GAAI,KACjC,IAAMC,EAAoBzC,OAAOC,aAAaC,QAAQ,kBAClDuC,GAAqBA,IAAsBN,GAC7CnC,OAAOC,aAAaS,QAAQ,wBAA0BJ,KAAKC,MAAOkC,GAEpEzC,OAAOC,aAAaS,QAAQ,iBAAkByB,IAIlD7F,QAAQC,IAAI,mCAA0ByE,GACtCD,EAAUC,QAlBeD,MAoB1B,CAACF,EAAkBC,EAAeE,IAE9BpE,G,OCpBD8F,EAASC,IAATD,KAKO,SAASE,EAAQC,GAC9B,IAAM1E,EAAU0E,EAAMhE,OAASgE,EAAM1E,QAE/B2E,EAAMlD,EAAiBiD,EAAME,YAAa5E,GAExC6E,EAAiBC,cAAjBD,aAER,IAAK7E,EACH,OACE,+BACE,cAAC,IAAD,CAAU+E,QAAM,EAACC,UAAW,CAAEC,KAAM,OAK1C,IAAIC,EAAiBlF,EAAQmF,OAAO,EAAG,GAEnCR,GAAOA,EAAIZ,QAAQ,MAAQ,EAC7BmB,EAAiBP,EACO,UAAfD,EAAMU,KACfF,GAAkB,MAAQlF,EAAQmF,QAAQ,GAClB,SAAfT,EAAMU,OACfF,EAAiBlF,GAGnB,IAgBIqF,EAhBEC,EA5BkB,SAACtF,EAASuF,GAAV,gBACrBA,GAAiB,wBAA0B,YADtB,OACmCvF,GA2BrCwF,CAAkBxF,EAAS0E,EAAMa,eACvD,OAAIb,EAAMe,UAEN,sBAAMC,MAAO,CAAEC,cAAe,UAA9B,SACE,mBACED,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAME,cAAC,IAAD,CAAUC,KAAMhG,EAAQiG,cAAeb,KAAM,EAAGc,MAAO,SAQ7Db,EADEX,EAAMlE,SAEN,cAAC+D,EAAD,CAAM4B,SAAU,CAAE3F,SAAUkE,EAAMlE,UAAY4F,SAAU,CAAEf,KAAMrF,GAAhE,SACE,mBACE0F,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAMGb,MAML,cAACX,EAAD,CAAM6B,SAAU,CAAEf,KAAMrF,GAAxB,SACE,mBACE0F,MAAO,CAAEE,MAAwB,UAAjBf,EAA2B,UAAY,QACvDgB,OAAO,SACPC,KAAMR,EACNS,IAAI,sBAJN,SAMGb,MAOP,iCACE,sBAAMQ,MAAO,CAAEC,cAAe,UAA9B,SACE,cAAC,IAAD,CAAUK,KAAMhG,EAAQiG,cAAeb,KAAM,EAAGc,MAAOxB,EAAM2B,SAAW3B,EAAM2B,SAAW,EAAI,MAE/F,sBAAMX,MAAO,CAAEC,cAAe,SAAUW,YAAa,EAAGD,SAAU3B,EAAM2B,SAAW3B,EAAM2B,SAAW,IAApG,SACGhB,QC7GT,IAAQlE,EAAUhE,EAAQ,IAAlBgE,MA4BO,SAASoF,EAAQ7B,GAC9B,MAAoCnH,oBAAS,GAA7C,mBAAOiJ,EAAP,KAAmBC,EAAnB,KAIMC,ECdO,SAAoB1K,EAAUgE,GAAwB,IAAfM,EAAc,uDAAH,EAC/D,EAA8B/C,qBAA9B,mBAAOmJ,EAAP,KAAgBC,EAAhB,KAEMC,EAAcC,sBAAW,uCAC7B,WAAO7K,EAAUgE,GAAjB,eAAA9B,EAAA,0DACMlC,IAAYgE,EADlB,gCAE6BhE,EAAS8K,WAAW9G,GAFjD,QAEU+G,EAFV,UAGuBL,GACjBC,EAAWI,GAJjB,2CAD6B,wDAS7B,CAAC/K,EAAUgE,IA2Bb,OAvBAjE,EAAwB,IAAbuE,GAAkBtE,GAAU,WACjCA,GAAYgE,GAAwB,IAAbM,GACzBsG,EAAY5K,EAAUgE,MAK1B3D,qBAAU,WACJ2D,GAAWhE,GAAU4K,EAAY5K,EAAUgE,KAC9C,CAACA,EAAShE,EAAU4K,IAGvBhK,EAAS,sBACP,sBAAAsB,EAAA,sDACMlC,GAAYgE,GAAWM,EAAW,GAEpCsG,IAHJ,2CAMAtG,EACAtE,GAAYgE,GAGP0G,EDzBSM,CAAWtC,EAAM1I,SAAU0I,EAAM1E,SAE7CiH,EAAeC,WAAW,QAE1BC,EAAeT,EASnB,GAP6B,qBAAlBhC,EAAMgC,UACfS,EAAezC,EAAMgC,SAEI,qBAAhBhC,EAAMhE,QACfyG,EAAezC,EAAMhE,OAGnByG,EAAc,CAChB,IAAMC,EAAejG,EAAMkG,YAAYF,GACvCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpCE,EAAQ9C,EAAM8C,OAAS9C,EAAM+C,iBAMnC,OAJID,GAAShB,IACXe,EAAiB,KAAON,EAAeO,GAAOF,QAAQ,IAItD,sBACE5B,MAAO,CACLC,cAAe,SACfU,SAAU3B,EAAMU,KAAOV,EAAMU,KAAO,GACpCsC,QAAS,EACTC,OAAQ,WAEVC,QAAS,WACPnB,GAAeD,IARnB,SAWGe,I,6HE1EMM,GAAY,mCAQZC,GAAW,CACtBC,UAAW,CACT1F,KAAM,YACNuD,MAAO,UACP9G,QAAS,MACTyG,cAAe,GACfyC,OAAQ,UAAYnG,OAAOgC,SAASoE,SAAW,SAEjDC,QAAS,CACP7F,KAAM,UACNuD,MAAO,UACP9G,QAAS,EACTkJ,OAAO,gCAAD,OAAkCH,IACxCtC,cAAe,yBAEjB4C,MAAO,CACL9F,KAAM,QACNuD,MAAO,UACP9G,QAAS,GACTkJ,OAAO,8BAAD,OAAgCH,IACtCtC,cAAe,8BACf6C,OAAQ,0CAEVC,QAAS,CACPhG,KAAM,UACNuD,MAAO,UACP9G,QAAS,EACTkJ,OAAO,gCAAD,OAAkCH,IACxCO,OAAQ,6BACR7C,cAAe,iCAEjB+C,QAAS,CACPjG,KAAM,UACNuD,MAAO,UACP9G,QAAS,EACTsJ,OAAQ,6BACR7C,cAAe,gCACfyC,OAAO,gCAAD,OAAkCH,KAE1CU,OAAQ,CACNlG,KAAM,SACNuD,MAAO,UACP9G,QAAS,EACTsJ,OAAQ,kCACR7C,cAAe,+BACfyC,OAAO,+BAAD,OAAiCH,KAEzCW,KAAM,CACJnG,KAAM,OACNuD,MAAO,UACP9G,QAAS,IACT0I,MAAO,EACPiB,SAAU,IACVT,OAAQ,0BACRI,OAAQ,2BACR7C,cAAe,oCAEjBmD,MAAO,CACLrG,KAAM,QACNuD,MAAO,UACP9G,QAAS,IACT0I,MAAO,EACPiB,SAAU,IACVT,OAAQ,qCACRI,OAAQ,gCACR7C,cAAe,6CAEjBoD,OAAQ,CACNtG,KAAM,SACNuD,MAAO,UACP9G,QAAS,MACT0I,MAAO,EACPiB,SAAU,IACVT,OAAQ,oCACRI,OAAQ,gCACR7C,cAAe,wCAEjBqD,cAAe,CACbvG,KAAM,gBACNuD,MAAO,UACP9G,QAAS,eACTyG,cAAe,GACfyC,OAAO,yBAETa,gBAAiB,CACfxG,KAAM,kBACNuD,MAAO,UACP9G,QAAS,MACTyG,cAAe,GACfyC,OAAO,yBAETc,gBAAiB,CACfzG,KAAM,mBACNuD,MAAO,UACP9G,QAAS,OACTyG,cAAe,0CACfyC,OAAO,mCAETe,SAAU,CACR1G,KAAM,WACNuD,MAAO,UACP9G,QAAS,MACTyG,cAAe,kCACfyC,OAAO,+BACPS,SAAU,GAEZO,gBAAiB,CACf3G,KAAM,kBACNuD,MAAO,UACP9G,QAAS,MACTyG,cAAe,GACfyC,OAAQ,UAAYnG,OAAOgC,SAASoE,SAAW,SAEjDgB,cAAe,CACb5G,KAAM,gBACNuD,MAAO,UACP9G,QAAS,IACTyG,cAAe,GACfyC,OAAQ,UAAYnG,OAAOgC,SAASoE,SAAW,QAC/CQ,SAAU,GAEZS,cAAe,CACb7G,KAAM,gBACNuD,MAAO,UACP9G,QAAS,GACTyG,cAAe,yCACfyC,OAAO,4BACPS,SAAU,GAEZU,SAAU,CACR9G,KAAM,WACNuD,MAAO,UACP9G,QAAS,GACTyG,cAAe,mCACfyC,OAAO,gCAIEoB,GAAU,SAAAtK,GACrB,IAAK,IAAMuK,KAAKvB,GACd,GAAIA,GAASuB,GAAGvK,UAAYA,EAC1B,OAAOgJ,GAASuB,IClJdnM,GAAWC,EAAQ,IAAnBD,OAKFoM,GAAY,GAIH,SAASC,GAAWlM,EAAkBoL,EAAUe,GAC7D,GAAgC,qBAArBnM,EAET,8CAAO,WAAOoM,EAAIC,GAAX,qCAAAxL,EAAA,0DAI4C,IAA7ChB,GAAOqB,OAAOC,SAASnB,GAJtB,oBAKHrB,EAAWqB,EAAiBrB,SAC5ByC,EAASpB,EANN,KAOOA,EAAiBrB,UAPxB,qCAO2CqB,EAAiBrB,SAAS2C,aAPrE,0BAOHgL,EAPG,iCAQMtM,EAAiBuG,YARvB,wBASH5H,EAAWqB,EACXoB,EAASpB,EAAiBqB,YAVvB,UAWarB,EAAiBsB,aAX9B,QAWHgL,EAXG,kBAcLxL,QAAQC,IAAI,UAAWuL,GAEnBC,EAAU,KACVC,EAAS,KACVC,UAAUC,SACXH,EAAU,CACRI,OD7BwB,uCC8BxBC,OAAQ,WACRC,UAAWP,EAAQ7K,QAEnBqL,mBAAoB,SAAAC,GACPjM,QAAQC,IAAI,YAAagM,GACpC,IAAMC,EAAmBf,GAAUc,EAAcE,YAAYpG,MAC7B,oBAArBmG,GACTA,EAAiBD,EAAcE,eAKrCT,EAASU,aAAOX,IAIdY,EAAmB,GACnBb,EAAQtH,MAAQsH,EAAQ7K,QAAU,IACpC0L,EAAmBb,EAAQtH,KAAO,KAGhCoI,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBb,EAAQ7K,UACV2L,EAAiB,uCA5Cd,YAiDChB,aAAciB,SAjDf,wBAkDUvM,QAAQC,IAAI,cAAeqL,GAlDrC,UAmDcA,EAnDd,QAmDDkB,EAnDC,sCAqDIlB,EAAGhB,WACNgB,EAAGhB,SAAWA,GAAYvL,GAAOiE,MAAMyJ,WAAW,MAAO,SAEtDnB,EAAGoB,WACNpB,EAAGoB,SAAW3N,GAAOiE,MAAM2J,QAAQ,OAE1B3M,QAAQC,IAAI,aAAcqL,GA3DpC,UA4DchL,EAAOsM,gBAAgBtB,GA5DrC,QA4DDkB,EA5DC,kBA8DQxM,QAAQC,IAAI,UAAWuM,GAG9BjB,IACFJ,GAAUqB,EAAOzG,MAAQwF,KAIvBG,GAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAK9F,QAAQ4F,EAAQ7K,UAAY,GAtE7D,mBAuEmB+K,EAAO3F,KAAKyG,EAAOzG,MAvEtC,EAuEO8G,QACAtO,GAAG,OAAO,SAAA4N,GAChB,MAAO,CACLW,QAAS,kBAAMpJ,OAAOqJ,MAAM1B,GAAaiB,GAAkBH,EAAYpG,WA1E1E,2BA8EDiH,KAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAaX,EAAOzG,KACpBqH,UAAW,iBAIT7B,EArFH,kCAsFwBD,EAtFxB,QAsFO+B,EAtFP,OAuFOC,EAAoBzO,YAAW,sBAAC,4BAAAkB,EAAA,6DACpCC,QAAQC,IAAI,qBAAsBoN,EAAUxP,GADR,SAEIA,EAAS0P,sBAAsBF,EAAStH,MAF5C,QAE9ByH,EAF8B,SAGHA,EAA0BC,gBACzDlC,EAAS,2BAAK8B,GAAaG,IAC3B1O,cAAcwO,IALoB,2CAOnC,KA9FJ,WAkGwB,oBAAhBd,EAAOkB,KAlGf,kCAmGKlB,EAAOkB,OAnGZ,iCAsGIlB,GAtGJ,mCAwGQxM,QAAQC,IAAR,MAEPiN,EAAU,KAAES,MAAQ,KAAEA,KAAKT,QAAU,KAAES,KAAKT,QAAU,KAAEpI,OAASjB,KAAKC,MAAMD,KAAKQ,UAAU,KAAES,QAAQ8I,KAAO/J,KAAKC,MAAMD,KAAKC,MAAMD,KAAKQ,UAAU,KAAES,QAAQ8I,MAAM9I,MAAMoI,QAAU,KAAES,KAAO,KAAEA,KAAO9J,KAAKQ,UAAL,MAEvMrE,QAAQC,IAAI,qBAAsBiN,GAClCF,KAAalI,MAAM,CACjBoI,QAAS,oBACTC,YAAaD,IAEX3B,GAAgC,oBAAbA,GACrBA,EAAS,EAAD,IAlHP,2DAAP,wD,0DCXW,SAASsC,GAAQtH,GAC9B,OAAKA,EAAM1E,SAAgD,oBAA9B0E,EAAM1E,QAAQiG,YAIpC,cAAC,IAAD,aAAUD,KAAMtB,EAAM1E,QAAQiG,eAAmBvB,IAH/C,yBC2BI,SAASuH,GAAavH,GACnC,MAA0BnH,mBAASmH,EAAMhE,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAwBpD,oBAAS,GAAjC,mBAAO2O,EAAP,KAAaC,EAAb,KAEMC,EAAsC,qBAAhB1H,EAAMhE,MAAwBgE,EAAMhE,MAAQA,EAClEiE,EAAMlD,YAAiBiD,EAAME,YAAawH,GAE1CC,EACJ,sBACE3G,MAAO,CAAE4G,UAAW,EAAG3E,OAAQ,WAC/BC,QAAS,WACPuE,GAASD,IAHb,UAME,cAAC,KAAD,CAAOK,MAAO,cAACC,GAAA,EAAD,CAAgB9G,MAAO,CAAEW,SAAU,KAAjD,SACE,cAACoG,EAAA,EAAD,CAAgB/G,MAAO,CAAEW,SAAU,QAC5B,IARX,UAaMzB,EAA0BF,EAA1BE,YAAapE,EAAakE,EAAblE,SACfkM,EAAgB7F,sBAAW,uCAC/B,WAAM5F,GAAN,iBAAA/C,EAAA,yDAC0B,qBAAb+C,EADb,uBAEQjB,EAAUiB,GACF8C,QAAQ,QAAU,GAAK/D,EAAQ+D,QAAQ,QAAU,GAHjE,0CAKsCa,EAAYtD,YAAYtB,GAL9D,QAKc2M,EALd,UAOU3M,EAAU2M,GAPpB,0DAYIhM,EAASX,GACe,oBAAbQ,GACTA,EAASR,GAdf,0DAD+B,sDAmB/B,CAAC4E,EAAapE,IAGVoM,EAAUV,EACd,qBACExG,MAAO,CACLmH,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAETrF,QAAS,WACPuE,GAAQ,IATZ,SAYE,cAAC,KAAD,CACEtP,MAAO,IACPqQ,WAAY,KACZC,QAAS,SAAAjO,GACPf,QAAQC,IAAI,aAAcc,GAC1BiN,GAAQ,IAEViB,OAAQ,SAAAnM,GACN,GAAIA,EAAU,CACZ9C,QAAQC,IAAI,aAAc6C,GAC1B,IAAIoM,EAAmBpM,EACnBoM,EAAiBtJ,QAAQ,MAAQ,IACnCsJ,EAAmBA,EAAiBlI,OAAOkI,EAAiBC,YAAY,OACxEnP,QAAQC,IAAI,gBAAiBiP,IAE/BlB,GAAQ,GACRO,EAAcW,KAGlB3H,MAAO,CAAEuH,MAAO,YAIpB,GAGF,OACE,gCACGL,EACD,cAAC,KAAD,CACE7P,GAAG,YACHsF,KAAK,YACLkL,aAAa,MACbC,UAAW9I,EAAM8I,UACjBC,YAAa/I,EAAM+I,YAAc/I,EAAM+I,YAAc,UACrDC,OAAQ,cAAC1B,GAAD,CAAShM,QAASoM,EAAchH,KAAM,EAAGc,MAAO,IACxDxF,MAAOiE,GAAOyH,EACduB,WAAYtB,EACZ7L,SAAU,SAAAtB,GACRwN,EAAcxN,EAAE2G,OAAOnF,aCpGlB,SAASkN,GAAWlJ,GACjC,IA+BIgJ,EACAC,EAhCJ,EAAwBpQ,mBAASmH,EAAM8C,MAAQ,MAAQ,OAAvD,mBAAOqG,EAAP,KAAaC,EAAb,KACA,EAA8BvQ,qBAA9B,mBAAOwQ,EAAP,KAAgBC,EAAhB,KACA,EAA0BzQ,qBAA1B,mBAAOmD,EAAP,KAAcC,EAAd,KAEMyL,EAAsC,qBAAhB1H,EAAMhE,MAAwBgE,EAAMhE,MAAQA,EAElEuN,EAAS,SAAAC,GACb,OAAKxJ,EAAM8C,MAET,qBACE9B,MAAO,CAAEiC,OAAQ,WACjBC,QAAS,WACP,GAAa,QAATiG,EACFC,EAAQ,OACRE,EAAW5B,QAGX,GADA0B,EAAQ,OACJ1B,EAAc,CAChB,IAAM+B,EAAW,IAAMjH,WAAWkF,GAAgB1H,EAAM8C,OAAOF,QAAQ,GACvE0G,EAAWG,QAEXH,EAAW5B,IAZnB,SAiBG8B,IAnBoB,IAwC3B,MAda,QAATL,GACFH,EAAS,IACTC,EAAaM,EAAO,sBAEpBP,EAAS,SACTC,EAAaM,EAAO,qBAGtB5R,qBAAU,WACH+P,GACH4B,EAAW,MAEZ,CAAC5B,IAGF,cAAC,KAAD,CACEqB,YAAa/I,EAAM+I,YAAc/I,EAAM+I,YAAc,aAAeI,EACpEL,UAAW9I,EAAM8I,UACjBE,OAAQA,EACRhN,MAAOqN,EACPJ,WAAYA,EACZnN,SAAQ,uCAAE,WAAMtB,GAAN,mBAAAhB,EAAA,sDACF+C,EAAW/B,EAAE2G,OAAOnF,MACb,QAATmN,GACIR,EAAmBnG,WAAWjG,KAE5BmN,EAAWf,EAAmB3I,EAAM8C,MAC1C7G,EAASyN,GACqB,oBAAnB1J,EAAMlE,UACfkE,EAAMlE,SAAS4N,GAEjBJ,EAAW/M,IAEX+M,EAAW/M,IAGbN,EAASM,GACqB,oBAAnByD,EAAMlE,UACfkE,EAAMlE,SAASS,GAEjB+M,EAAW/M,IAnBL,2CAAF,wDC1Ed,IAAQsD,GAAoBC,IAApBD,KAAM8J,GAAc7J,IAAd6J,UA8BC,SAASjL,GAAOsB,GAC7B,MAA0CnH,qBAA1C,mBAAO+Q,EAAP,KAAsBC,EAAtB,KACAlS,qBAAU,WAAM,4CACd,4BAAA6B,EAAA,0DACMwG,EAAMjG,OADZ,gCAE6BiG,EAAMjG,OAAO+C,aAF1C,OAEUgN,EAFV,OAGID,EAAiBC,GAHrB,4CADc,uBAAC,WAAD,wBAOdhN,KACC,CAACkD,EAAMjG,SAEV,IA4BIsP,EACAU,EACAC,EA9BEC,EAAkBjK,EAAM1E,SAAWsO,EAEzC,EAAwB/Q,qBAAxB,mBAAO2N,EAAP,KAAa0D,EAAb,KACA,EAAoBrR,qBAApB,mBAAOsR,EAAP,KAAWC,EAAX,KACA,EAA4BvR,qBAA5B,mBAAOwR,EAAP,KAAeC,EAAf,KACA,EAAkCzR,qBAAlC,mBAAO0R,EAAP,KAAkBC,EAAlB,KACA,EAAoB3R,qBAApB,mBAAO4R,EAAP,KAAWC,EAAX,KAEMC,EAAe3K,EAAM1I,SACzB,cAAC,KAAD,CAASkS,MAAM,SAAf,SACE,cAACoB,EAAA,EAAD,CACE1H,QAAS,WACPgH,GAAS1D,IAEXqE,QAAS,GACT7J,MAAO,CACLgC,QAAS,EACT9B,MAAOlB,EAAMkB,MAAQlB,EAAMkB,MAAQ,GACnC+B,OAAQ,UACRtB,SAAU,GACVV,cAAe,cAKrB,GAMF,GAAIkJ,EACFd,EACE,gCACE,8BACE,cAAC,GAAD,CAAM3H,UAAQ,EAAd,SAAgBuI,MAElB,cAAC,KAAD,CACEjO,MAAOiO,EACPvJ,KAAK,MACLoK,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,QAIjCnB,EACE,eAAC,IAAD,CAEE7G,QAAS,WACPkH,EAAM,KAHV,UAME,cAACrC,EAAA,EAAD,IANF,UACM,QAQRiC,EACE,eAAC,IAAD,CAEE9G,QAAS,WACPwH,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACe,EAAA,EAAD,IAPF,iBACM,aASH,GAAIV,EAAI,CACb,IAAMA,EAAKrN,aAAaC,QAAQ,kBAC1B+N,EAAS,IAAI5S,UAAOkG,OAAO+L,GAEjC,GAAIW,EAAO9P,UAAY2O,EACrBZ,EACE,8BACE,8EAGC,CACL,IAAMgC,EAAsB,GACtBC,EAAiB,GASvB,IAAK,IAAMlN,KARXiN,EAAoBD,EAAO9P,UAAW,EACtCgQ,EAAeC,KACb,qBAAKvK,MAAO,CAAEW,SAAU,GAAIqB,QAAS,EAAGwI,gBAAiB,WAAzD,SACE,oBAAGpK,KAAM,OAASqJ,EAAlB,UACE,cAAC1K,EAAD,CAASgB,WAAS,EAACzF,QAAS8P,EAAO9P,QAAS4E,YAAaF,EAAME,cADjE,IACkFkL,EAAO9P,QAAQmF,OAAO,EAAG,SAI7FrD,aAChB,GAAIgB,EAAIiB,QAAQ,0BAA4B,EAAG,CAC7C5F,QAAQC,IAAI0E,GACZ,IAAMqN,EAASrO,aAAaC,QAAQe,GAC9BsN,EAAa,IAAIlT,UAAOkG,OAAO+M,GAChCJ,EAAoBK,EAAWpQ,WAClC+P,EAAoBK,EAAWpQ,UAAW,EAC1CgQ,EAAeC,KACb,qBAAKvK,MAAO,CAAEW,SAAU,IAAxB,SACE,oBAAGP,KAAM,OAASqK,EAAlB,UACE,cAAC1L,EAAD,CAASgB,WAAS,EAACzF,QAASoQ,EAAWpQ,QAAS4E,YAAaF,EAAME,cAAgB,IAClFwL,EAAWpQ,QAAQmF,OAAO,EAAG,UAQ1C4I,EACE,gCACE,6CAEA,8BACE,cAAC,GAAD,CAAM3H,UAAQ,EAAd,SAAgB+I,MAGlB,uBAEA,8EAEE,mBAAGtJ,OAAO,SAASC,KAAM,mBAAqBqJ,EAAIpJ,IAAI,sBAAtD,2BAFF,OAOA,cAAC,KAAD,CACErF,MAAO,mBAAqByO,EAC5B/J,KAAK,MACLoK,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,KAG7B,cAACvB,GAAD,CAAW3I,MAAO,CAAEW,SAAU,MAAQD,UAAQ,EAA9C,SACG,mBAAqB+I,IAGvBa,EACC,gCACE,qDACCA,EACD,cAAC,IAAD,CACEpI,QAAS,WACP,IAAMtD,EAAoBzC,OAAOC,aAAaC,QAAQ,kBAClDuC,GACFzC,OAAOC,aAAaS,QAAQ,wBAA0BJ,KAAKC,MAAOkC,GAEpE,IACMhB,EADepG,UAAOkG,OAAOC,eACHgN,cAAc/M,WAC9CzB,OAAOC,aAAaS,QAAQ,iBAAkBe,GAC9CzB,OAAOgC,SAASyM,UATpB,yBAgBF,MAMR7B,EACE,eAAC,IAAD,CAEE7G,QAAS,WACPkH,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC3C,EAAA,EAAD,IAPF,aACM,WASRiC,EACE,eAAC,IAAD,CAEE9G,QAAS,WACPwH,EAAM,IACNN,EAAM,KAJV,UAOE,cAACe,EAAA,EAAD,IAPF,UACM,YASH,CACL,IAAMU,EAAa,CACjB7I,QAAS,IAGXqG,EACE,gCACE,qBAAKrI,MAAO6K,EAAZ,SACE,cAACtE,GAAD,CACEuB,WAAS,EACT5I,YAAaF,EAAME,YACnB6I,YAAY,aACZzN,QAASiP,EACTzO,SAAU0O,MAGd,qBAAKxJ,MAAO6K,EAAZ,SACE,cAAC3C,GAAD,CACEpG,MAAO9C,EAAM8C,MACb9G,MAAOqO,EACPvO,SAAU,SAAAE,GACRsO,EAAUtO,WAMpB+N,EACE,eAAC,IAAD,CAEE7G,QAAS,WACPkH,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC3C,EAAA,EAAD,IAPF,aACM,WASRiC,EACE,eAAC,IAAD,CAEE9G,QAAS,WACPwH,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACe,EAAA,EAAD,IAPF,iBACM,QAWV,OACE,iCACGR,EACD,cAAC,KAAD,CACEmB,QAAStF,EACTgD,MACE,gCACGS,EAAkB,cAAClK,EAAD,CAASzE,QAAS2O,EAAiB/J,YAAaF,EAAME,cAAkB,cAAC,KAAD,IAC3F,qBAAKc,MAAO,CAAE+K,MAAO,QAASC,aAAc,IAA5C,SACE,cAACnK,EAAD,CAASvG,QAAS2O,EAAiB3S,SAAU0I,EAAM1I,SAAUyL,iBAAkB/C,EAAM8C,aAI3FmJ,KAAM,WACJ7B,IACAM,IACAR,GAAS1D,IAEX0F,SAAU,WACR9B,IACAM,IACAR,GAAS1D,IAEX2F,OAAQ,CACNnC,EACAD,EACA,eAAC,IAAD,CAEEqC,KAAK,UACLC,UAAWhC,IAAWE,GAAaJ,EACnCmC,SAAS,EACTpJ,QAAS,WACP,IAEIlH,EAFE+I,EAAKF,GAAW7E,EAAM1I,UAG5B,IACE0E,EAAQxD,UAAOiE,MAAM8P,WAAW,GAAKlC,GACrC,MAAO7P,GAEPwB,EAAQxD,UAAOiE,MAAM8P,WAAW,GAAK/J,WAAW6H,GAAQzH,QAAQ,IAGlEmC,EAAG,CACDyH,GAAIjC,EACJvO,UAEFkO,GAAS1D,GACT4D,KArBJ,UAwBE,cAACqC,EAAA,EAAD,IAxBF,UACM,WAxBV,SAmDGpD,OC/SM,SAASqD,GAAT,GAWX,IAVFpR,EAUC,EAVDA,QACAqR,EASC,EATDA,WACA1O,EAQC,EARDA,cACA2O,EAOC,EAPDA,gBACA9J,EAMC,EANDA,MACA/B,EAKC,EALDA,UACA8L,EAIC,EAJDA,UACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,kBACAlM,EACC,EADDA,cAEMmM,EAAe,GACjBH,IACEA,EAAUI,eACZD,EAAazB,KACX,cAAC,IAAD,CAEEvK,MAAO,CAAEC,cAAe,MAAOiM,WAAY,EAAGtF,UAAW,GACzDuF,MAAM,QACNzM,KAAK,QACLwC,QAAS6J,EALX,mBACM,iBAURC,EAAazB,KACX,cAAC,IAAD,CAEEvK,MAAO,CAAEC,cAAe,MAAOiM,WAAY,EAAGtF,UAAW,GACzDuF,MAAM,QACNzM,KAAK,QAELwC,QAAS4J,EANX,oBACM,iBAaZ,IAAQ3M,EAAiBC,cAAjBD,aAEFkJ,EAAUtI,EACd,GAEA,iCACGzF,EACC,cAACyE,EAAD,CAASzE,QAASA,EAAS4E,YAAa0M,EAAiB/L,cAAeA,IAExE,gBAEF,cAACgB,EAAD,CAASvG,QAASA,EAAShE,SAAU2G,EAAe6E,MAAOA,IAC3D,cAACpE,GAAD,CACEpD,QAASA,EACThE,SAAU2G,EACVlE,OAAQ4S,EACRzM,YAAa0M,EACb9J,MAAOA,EACP5B,MAAwB,UAAjBf,EAA2B,UAAY,eAKpD,OACE,gCACGkJ,EACA2D,KC1GP,OAA6BvU,EAAQ,IAArC,GAAQgE,MAAR,GAAe2Q,U,gBCDG3U,EAAQ,IAAlBgE,M,ICIR,GAA6BhE,EAAQ,IAArC,GAAQgE,MAAR,GAAe4Q,UCEf,IAAQ5Q,GAAUhE,EAAQ,IAAlBgE,MA8BO,SAAS6Q,GAAOtN,GAC7B,IAcIuN,EAdJ,EAA8B1U,qBAA9B,mBAAOyC,EAAP,KAAgBkS,EAAhB,KACA,EAA0C3U,qBAA1C,mBAAO4U,EAAP,KAAsBC,EAAtB,KAEA/V,qBAAU,YACc,uCAAG,4BAAA6B,EAAA,0DACnBwG,EAAM/B,cADa,gCAEQ+B,EAAM/B,cAActE,eAF5B,OAEfgU,EAFe,OAGrBD,EAAiBC,EAAe,IAChClU,QAAQC,IAAIiU,GAJS,2CAAH,qDAOtBC,KACC,CAAC5N,EAAM/B,gBAIRsP,EADEjS,GAA0C,oBAAxBA,EAAQiG,YAClB,cAAC,IAAD,CAAUD,KAAMhG,EAAQiG,cAAeb,KAAM,EAAGc,MAAO,IAEvD,wBAGZ,IAAMvB,EAAMlD,YAAiBiD,EAAME,YAAa5E,GAE1C0M,EAAgB7F,sBAAW,uCAC/B,WAAM5F,GAAN,iBAAA/C,EAAA,yDAC0B,qBAAb+C,EADb,uBAEQjB,EAAUiB,GACF8C,QAAQ,QAAU,GAAK/D,EAAQ+D,QAAQ,QAAU,GAHjE,0CAKsCW,EAAME,YAAYtD,YAAYtB,GALpE,QAKc2M,EALd,UAOU3M,EAAU2M,GAPpB,0DAYIuF,EAAWlS,GAZf,0DAD+B,sDAgB/B,CAAC0E,EAAME,YAAaF,EAAMlE,WAGtBiJ,EAAKF,GAAW7E,EAAM/B,eAE5B,OACE,+BACE,cAAC,KAAD,CACEyC,KAAK,QACLqI,YAAa/I,EAAM+I,YAAc/I,EAAM+I,YAAc,eACrDC,OAAQuE,EAERvR,MAAOiE,GAAO3E,EACdQ,SAAU,SAAAtB,GAERwN,EAAcxN,EAAE2G,OAAOnF,QAEzB6R,OACE,eAAC,KAAD,CAASrE,MAAM,0CAAf,UACE,cAAC,IAAD,CACEtG,QAAS,WACP6B,EAAG,CACDyH,GAAIlR,EACJU,MAAOS,GAAM8P,WAAW,UAE1BiB,EAAW,KAEbL,MAAM,SACNW,KAAM,cAACrB,EAAA,EAAD,MAER,cAAC/N,GAAD,CACEwC,MAAM,UACN5J,SAAU0I,EAAM/B,cAChBiC,YAAaF,EAAME,YACnB4C,MAAO9C,EAAM8C,MACbxH,QAASmS,W,eC5GR,SAASM,KACtB,OACE,mBAAG3M,KAAK,+CAA+CD,OAAO,SAASE,IAAI,sBAA3E,SACE,cAAC,KAAD,CACEmI,MAAM,UACNwE,SAAS,0BACThN,MAAO,CAAEiC,OAAQ,e,oFCYNgL,KAAXC,OACSpO,IAATD,KA2pBOsO,I,WC/qBA,SAASC,KACtB,IAAMC,EAAQlR,OAAOC,aAAaC,QAAQ,SAC1C,EAAoCxE,sBAAYwV,GAAmB,UAAVA,IAAzD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmDnO,cAA3CoO,EAAR,EAAQA,SAAUrO,EAAlB,EAAkBA,aAAsBsO,GAAxC,EAAgCC,OAAhC,EAAwCD,QAExC9W,qBAAU,WACRwF,OAAOC,aAAaS,QAAQ,QAASsC,KACpC,CAACA,IAYJ,OACE,sBAAKwO,UAAU,eAAe3N,MAAO,CAAEoH,SAAU,QAASwG,MAAO,EAAGC,OAAQ,GAA5E,UACE,sBAAM7N,MAAO,CAAEgC,QAAS,GAAxB,SAA+C,UAAjB7C,EAA2B,eAAO,iBAChE,cAAC,KAAD,CAAQ2O,QAASR,EAAYxS,SAbb,SAAAiT,GAClBR,EAAcQ,GACdP,EAAS,CAAEH,MAAOU,EAAYN,EAAOO,KAAOP,EAAOQ,c,uBCVtCnP,IAATD,K,uBCiOR,I,iCCpOIqP,GAAczW,EAAQ,MAEpB0W,GAAoC,CACxC/G,SAAU,WACViB,QAAS,eACTd,MAAO,GACP6G,OAAQ,GACRC,gBAAiB,UACjBC,aAAc,OAGVC,GAAoC,CACxC3H,UAAW,MACXsF,WAAY,MACZ9E,SAAU,WACVG,MAAO,MACP6G,OAAQ,MACRC,gBAAiB,UACjBC,aAAc,OAGVE,GAAc,SAACC,GACnB,OAAa,IAATA,EACK,2BAAKN,IAAZ,IAA0BE,gBAAiB,YACzB,IAATI,EACF,2BAAKN,IAAZ,IAA0BE,gBAAiB,YACzB,IAATI,EACF,2BAAKN,IAAZ,IAA0BE,gBAAiB,YAEpC,2BAAKF,IAAZ,IAA0BE,gBAAiB,iBAIzCK,GAAc,SAACpU,GACnB,OAAO,2BAAKiU,IAAZ,IAA0BF,gBAAiBH,GAAY,CAAE5N,KAAMhG,EAAQiG,mBAkB1DoO,GAT0C,SAAC3P,GACxD,IAAQgB,EAAyBhB,EAAzBgB,MAAOyO,EAAkBzP,EAAlByP,KAAMnU,EAAY0E,EAAZ1E,QACrB,OACE,qBAAK0F,MAAK,2BAAOwO,GAAYC,IAAUzO,GAAvC,SACE,qBAAKA,MAAO0O,GAAYpU,QClCfsU,GAL0C,SAAC5P,GACxD,IAAQgB,EAAyBhB,EAAzBgB,MAAOyO,EAAkBzP,EAAlByP,KAAMnU,EAAY0E,EAAZ1E,QACrB,OAAO,cAAC,GAAD,CAAUmU,KAAMA,EAAMnU,QAASA,EAAS0F,MAAK,2BAAOA,GAAP,IAAcuH,MAAO,IAAK6G,OAAQ,SCOxF,SAASS,GAASC,GACd,GAAIA,EAAIzU,SAAS,KAAM,CACnB,IAAM0U,EAAQD,EAAIE,MAAM,KACxB,MAAiB,MAAbD,EAAM,IAAkC,IAApBA,EAAM,GAAGhY,OACxBgY,EAAM,GACgB,IAApBA,EAAM,GAAGhY,OACZ,GAAN,OAAUgY,EAAM,GAAhB,YAAsBA,EAAM,GAA5B,KAEKA,EAAM,GAAK,IAAMA,EAAM,GAAGE,MAAM,EAAG,GAE9C,OAAOH,EAGX,IA0IeI,GA1I8C,SAAClQ,GAAW,IAAD,EAChEmQ,EAAY,IAAIC,gBAAgBjT,OAAOgC,SAASkR,QAChDC,EAAWH,EAAUI,IAAI,YACzBC,EAAaL,EAAUI,IAAI,cAEzBE,EAAyCzQ,EAAzCyQ,cAAeC,EAA0B1Q,EAA1B0Q,SAAU3L,EAAgB/E,EAAhB+E,GAAIzJ,EAAY0E,EAAZ1E,QACrC,EAA4CqV,IAAM9X,SAAiB,IAAnE,mBAAO+X,EAAP,KAAuBC,EAAvB,KACA,EAAkCF,IAAM9X,UAAkB,GAA1D,mBAAOiY,EAAP,KAAkBC,EAAlB,KACMC,GAAiBC,MAAMC,OAAON,KAAoBM,OAAON,GAAkB,EAI7EO,EAAwBzV,EAAkB+U,EAAe,YAAa,gBAAiB,CAACD,EAAYlV,IACxG6V,EAAmBA,GAAoBtB,GAASrX,UAAOiE,MAAM2U,YAAYD,EAAkB,SAC3F,IAAME,EAAmB3V,EAAkB+U,EAAe,YAAa,sBAAuB,CAACD,IACzFc,EAAgB5V,EAAkB+U,EAAe,YAAa,YAAa,CAACD,IAC5Ee,EAAUD,GAAYzB,GAASrX,UAAOiE,MAAM2U,YAAYE,EAAStP,QAAS,SAC1EwP,EAAO,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAUE,QACpBC,EAAOH,GAAYzB,GAASrX,UAAOiE,MAAM2U,YAAYE,EAASG,KAAM,SACpEC,EAAQ,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAUI,SAASC,WAC9BC,EAAU,SAACC,GAAD,cAAmBR,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAaS,MAAMC,WACpD,SAACC,GAAD,OAAkBA,EAAKzQ,iBAAL,OAAuBsQ,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAOtQ,mBAE5C0Q,EAAe3B,GAAYsB,EAAQtB,GACnC4B,EAAS5W,GAAWsW,EAAQtW,GAC5B6W,EAAW,kGAA8F3B,EAA9F,yBAAyHlV,GACpI8W,EAAM,wGAAoG5B,EAApG,yBAA+HlV,EAA/H,wBAEN+W,EAAY,cAAC,IAAD,kCACZC,EACJ,8BACE,sBAAKtR,MAAO,CAAEuR,OAAQ,oBAAqBvP,QAAS,GAAIuF,MAAO,IAAKiK,OAAQ,OAAQ5K,UAAW,IAA/F,UACE,4CAAesJ,OAAOV,IAAe,GAAK,KACzCF,GAAY,kDACAA,EAASL,MAAM,EAAG,IADlB,MAEX,cAAC,GAAD,CAAUR,KAAMwC,EAAc3W,QAASgV,EAAUtP,MAAO,CAAEyR,cAAe,EAAGvF,WAAY,QAEzFsE,GAAW,qCACV,uBACA,kDAAqBE,EAAS3Z,OAAS,GAAlB,UAA0BmZ,OAAOQ,GAAUgB,YAAY,KAAvD,UAAkEhB,MACvF,mCAAMH,EAAN,eAA2BE,EAA3B,WACA,cAAC,KAAD,CAAUkB,QAAS,IAAQpB,EAAQE,EAAMmB,UAAU,OAErD,uBACA,qBAAK5R,MAAO,CAAEwR,OAAQ,GAAtB,SACE,cAAC,KAAD,CACE1W,SAAU,SAAAtB,GACRqW,EAAkBrW,EAAE2G,OAAOnF,QAE7B6R,OAAQ,cAAC,IAAD,CACNxB,UAAW2E,IAAkBjM,IAAO2L,EACpCxN,QAAO,sBAAE,4BAAA1J,EAAA,2DACHwX,GAAiBjM,GAAM2L,GADpB,uBAGCzK,EAASlB,EACb2L,EAASmC,OACP,EACAvC,EACA,CAAEtU,MAAOxD,UAAOiE,MAAMyJ,WAAW0K,EAAgB,WAEnD,SAACkC,GACCrZ,QAAQC,IAAI,mCAA0BoZ,IAClCA,GAA6B,cAAlBA,EAAOpE,QAA4C,IAAlBoE,EAAOpE,SACrDjV,QAAQC,IAAI,6BAAqBoZ,EAAOtT,KAAO,cAC/C/F,QAAQC,IACN,iBACAoZ,EAAOC,QACP,KACCD,EAAO3M,UAAY2M,EAAOE,KAC3B,MACAxQ,WAAWsQ,EAAO/O,UAAY,IAC9B,aAKRtK,QAAQC,IAAI,2CAA4CuM,GAzBnD,KA0BLxM,QA1BK,SA0BawM,EA1Bb,wBA0BGvM,IA1BH,2DAFH,wBAoCZ,gCACE,sDAAyByX,KACzB,cAAC,IAAD,CAAQjO,QA9EE,kBAAM6N,GAAa,IA8ED1E,UAAW/Q,EAAvC,mBACA,eAAC,KAAD,CAAOkO,MAAM,QAAQsC,QAASgF,EAAW3E,OAAQ,KAAMD,SA9E5C,kBAAM6E,GAAa,IA8E9B,UACA,cAAC,GAAD,CACEtB,KAAMyC,EACN5W,QAASA,GAAW9C,UAAO4U,UAAU6F,YACrCjS,MAAO,CAAEyR,aAAc,SAEvB,uBACA,cAAC,IAAD,CACErG,KAAK,OACL0B,KAAM,cAACoF,GAAA,EAAD,CAAiBlS,MAAO,CAAEE,MAAO,UAAWS,SAAU,WAC5DP,KAAM+Q,EACNhR,OAAO,WAET,cAAC,IAAD,CACEiL,KAAK,OACL0B,KAAM,cAACqF,GAAA,EAAD,CAAkBnS,MAAO,CAAEE,MAAO,UAAWS,SAAU,WAC7DP,KAAMgR,EACNjR,OAAO,iBAIb,uBACA,sDACA,wBAAOH,MAAO,CAAEuH,MAAO,QAAvB,UACE,+BACE,oBAAIvH,MAAO,CAAEoS,UAAW,QAAxB,SAAkC,2CAClC,oBAAIpS,MAAO,CAAEoS,UAAW,SAAxB,SAAmC,uDAHvC,OAKG/B,QALH,IAKGA,GALH,UAKGA,EAAaS,aALhB,aAKG,EAAoBuB,QACjB,SAACrB,GAAD,OAAkBA,IAASxZ,UAAO4U,UAAU6F,eAAaK,KACzD,SAACtB,EAAcuB,GAAf,OAA8B,+BAC1B,qBAAIvS,MAAO,CAAEoS,UAAW,QAAxB,UACE,cAAC,GAAD,CAAU3D,KAAM8D,EAAGjY,QAAS0W,EAAMhR,MAAO,CAAEwS,YAAa,EAAGf,cAAe,KACxE,oBAAGrR,KAAI,+CAA0C4Q,GAAQ7Q,OAAO,SAAhE,UACG6Q,EAAK/B,MAAM,EAAG,IADjB,YAIJ,qBAAIjP,MAAO,CAAEoS,UAAW,SAAxB,cACIvD,GAASrX,UAAOiE,MAAM2U,YAAYC,EAAYoC,OAAOF,GAAI,0BAS7E,OAAQjC,GAAYA,EAASoC,QAAUlb,UAAO4U,UAAU6F,YAAeX,EAAcD,GCnJ/E7Z,GAAWC,EAAQ,IAAnBD,OAqBFmb,GAAgBvQ,GAASO,QAOpBlK,QAAQC,IAAI,+CAMvB,IAAMka,GAAsBxO,UAAUC,OAAS,IAAI7M,GAAOqb,UAAUC,sBAAsB,oCAAsC,KAC1HC,GAAgB3O,UAAUC,OAAS,IAAI7M,GAAOqb,UAAUC,sBAAsB,gCAAkC3Q,IAAa,KAI7H6Q,GAAmBL,GAAcrQ,OAEjC2Q,GAA0BC,oIAAYC,mBAAqBD,oIAAYC,mBAAqBH,GACvFva,QAAQC,IAAI,uCAA8Bua,IACrD,IAAMhW,GAAgB,IAAIzF,GAAOqb,UAAUC,sBAAsBG,IAG3DpT,GAAgB8S,GAAc9S,cAQ9BuT,GALa,IAAIC,IAAW,CAChCC,QAAS,aAI2BC,iBAAX,uCACSpR,IAChC,GAME0J,GAAY,IAAI2H,IAAU,CAC9BvP,QAAS,UACTwP,eAAe,EACfpG,MAAM,QACNqG,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACT3P,QAAS,CACP4P,OAAQ,2CACRC,SAAU5R,GACV6R,IAAK,CACH,EAAE,gCAAF,OAAkC7R,IAClC,IAAI,6BAOV,oBAAqB,CACnBkG,QAAS,CACP4L,KAAM,4GACNtX,KAAM,WACNiJ,YAAa,iDAEfgO,QAASR,GACTc,UAAU,WAAD,4BAAE,WAAO5d,EAAU4N,GAAjB,SAAA1L,EAAA,sEACHlC,EAAS6d,SADN,gCAEF7d,GAFE,2CAAF,qDAAC,OA8ND8d,OApNf,SAAapV,GACX,IAAM4M,EAAkBgH,IAAuBA,GAAoByB,SAAWzB,GAAsBG,GAEpG,EAAgDlb,qBAAhD,mBAAOmF,EAAP,KAAyBsX,EAAzB,KACA,EAA8Bzc,qBAA9B,mBAAOyC,EAAP,KAAgBkS,EAAhB,KAEMT,EAAiB,uCAAG,sBAAAvT,EAAA,sEAClBqT,GAAU0I,sBADQ,WAErBvX,IAAoBA,EAAiB1G,UAA2D,mBAAxC0G,EAAiB1G,SAASke,WAF7D,gCAGhBxX,EAAiB1G,SAASke,aAHV,OAKxBpZ,YAAW,WACTe,OAAOgC,SAASyM,WACf,GAPqB,2CAAH,qDAWjB9I,ECnIO,SAA0B6Q,EAAe/G,EAAiBhR,GACvE,MAA0B/C,mBAAS,GAAnC,mBAAOiK,EAAP,KAAc2S,EAAd,KAuBA,OAFAvd,aAnBkB,WAAM,4CACtB,gCAAAsB,EAAA,yDACMoT,EADN,yCAEW,GAFX,WAGM+G,EAAc7Q,MAHpB,gBAII2S,EAAS9B,EAAc7Q,OAJ3B,8BAMU4S,EAAM,IAAIC,IACd/I,EAAgB3H,QAAU2H,EAAgB3H,QAAQ7K,QAAU,EAC5D,6CACA,IATN,SAWuBwb,IAAQC,cAAcH,EAAKI,IAAKJ,EAAItb,SAAUwS,GAXrE,OAWUmJ,EAXV,OAYUC,EAAQ,IAAIC,IAAM,CAACF,GAAOD,IAAKJ,EAAItb,UACzCqb,EAASjT,WAAWwT,EAAME,SAASC,cAAc,KAbrD,6CADsB,uBAAC,WAAD,wBAiBtBC,KAEmBxa,GAAY,MAE1BkH,ED2GOuT,CAAiB1C,GAAe/G,GAGxC7I,EEtIO,SAAqB4P,EAAe2C,GACjD,MAAgCzd,qBAAhC,mBAAOkL,EAAP,KAAiBwS,EAAjB,KACMC,EAAY,uCAAG,sBAAAhd,EAAA,sDACfma,EAAc9Y,eAAe,YAC/B0b,EAAY5C,EAAc5P,UAEvBqB,UAAUC,QACXoR,IACGlG,IAAI,kDACJ3S,MAAK,SAAA8Y,GACJ,IAAMC,EAA+C,IAAjCD,EAAStP,KAAKkP,GAAS,QACvCK,IAAgB5S,GAClBwS,EAAYI,MAGfC,OAAM,SAAArY,GAAK,OAAI9E,QAAQC,IAAI6E,MAbf,2CAAH,qDAmBlB,OADArG,YAAUse,EAAc,OACjBzS,EFiHU8S,CAAYlD,GAAe,QAEtChH,EAAa5O,EAAcC,EAAkBC,IAEnDtG,qBAAU,WAAM,4CACd,4BAAA6B,EAAA,0DACMmT,EADN,gCAE6BA,EAAW7P,aAFxC,OAEUgN,EAFV,OAGI0D,EAAW1D,GAHf,4CADc,uBAAC,WAAD,wBAOdhN,KACC,CAAC6P,IAGJ,IAAMmK,EAAe7Y,IAAiBA,GAAcoX,UAAYpX,GAAcoX,SAASjb,QACjF2c,EACJpK,GAAcA,EAAWrV,UAAYqV,EAAWrV,SAAS+d,UAAY1I,EAAWrV,SAAS+d,SAASjb,QAK9F2K,EAAKF,GAAW8H,EAAY5I,GAM5B0M,GAHW5L,GAAW5G,GAAe8F,GAGrBrL,EAAkBuF,KAGlC+Y,EAAiBte,EAAkBiU,EAAY,CAAEvS,QAAS0c,IAQ5DG,EAAiB,GACrB,GAAoBH,GAAgBC,GAAmBD,IAAiBC,EAAiB,CACvF,IAAMG,EAAkBxS,GAAQqS,GAC1BI,EAAezS,GAAQoS,GAE3BG,EADsB,OAApBF,GAA6C,QAAjBD,EAE5B,qBAAK9V,MAAO,CAAEmH,OAAQ,EAAGC,SAAU,WAAYwG,MAAO,EAAGtG,IAAK,GAAItF,QAAS,IAA3E,SACE,cAAC,IAAD,CACE2D,QAAQ,gCACRC,YACE,4CACW,8CADX,+CAC2E,sCAD3E,yBAGE,6FAGJwF,KAAK,QACLgL,UAAU,MAMd,qBAAKpW,MAAO,CAAEmH,OAAQ,EAAGC,SAAU,WAAYwG,MAAO,EAAGtG,IAAK,GAAItF,QAAS,IAA3E,SACE,cAAC,IAAD,CACE2D,QAAQ,6BACRC,YACE,4CACW,4BAAIsQ,GAAmBA,EAAgBvZ,OADlD,kCAC2F,IACzF,cAAC,IAAD,CACEuF,QAAO,sBAAE,gCAAA1J,EAAA,6DACD6d,EAAWla,OAAOka,SAClBjQ,EAAO,CACX,CACEhN,QAAS,KAAOuZ,GAAcvZ,QAAQuX,SAAS,IAC/C2F,UAAW3D,GAAchW,KACzB4Z,eAAgB5D,GAAc4D,eAC9BC,QAAS,CAAC7D,GAAcrQ,QACxBmU,kBAAmB,CAAC9D,GAAc9S,iBAGtCpH,QAAQC,IAAI,OAAQ0N,GAXb,SAYUiQ,EAASK,QAAQ,CAAEC,OAAQ,0BAA2BC,OAAQxQ,IAAQwP,QAZhF,QAYD7R,EAZC,SAcLtL,QAAQC,IAAIqL,GAdP,2CADX,SAmBE,4BAAIoS,GAAgBA,EAAaxZ,SArBrC,OA0BFyO,KAAK,QACLgL,UAAU,WAMlBH,EACE,qBAAKjW,MAAO,CAAEmH,QAAS,EAAGC,SAAU,WAAYwG,MAAO,IAAKtG,IAAK,GAAItF,QAAS,GAAI9B,MAAOyS,GAAczS,OAAvG,SACGyS,GAAchW,OAMrB,IAAMmP,EAAgB3K,sBAAW,sBAAC,4BAAA3I,EAAA,sEACTqT,GAAU/N,UADD,OAC1BxH,EAD0B,OAEhCge,EAAoB,IAAI9c,GAAOqb,UAAUgE,aAAavgB,IAEtDA,EAASU,GAAG,gBAAgB,SAAAoC,GAC1BX,QAAQC,IAAR,2BAAgCU,EAAhC,yBACAkb,EAAoB,IAAI9c,GAAOqb,UAAUgE,aAAavgB,OAGxDA,EAASU,GAAG,mBAAmB,WAC7ByB,QAAQC,IAAR,oBACA4b,EAAoB,IAAI9c,GAAOqb,UAAUgE,aAAavgB,OAIxDA,EAASU,GAAG,cAAc,SAAC8f,EAAMC,GAC/Bte,QAAQC,IAAIoe,EAAMC,GAClBhL,OAjB8B,2CAmB/B,CAACuI,IAEJ3d,qBAAU,WACJkV,GAAUI,gBACZH,MAED,CAACA,IAEJ,MAA0BjU,qBAA1B,mBAAcmf,GAAd,WACArgB,qBAAU,WACRqgB,EAAS7a,OAAOgC,SAASC,YACxB,CAAC4Y,IAEJ,IAAMC,EAAkBha,IAAiBA,GAAcia,aAAuD,IAAzCvE,GAAchW,KAAK0B,QAAQ,SAEhG,OACE,sBAAKsP,UAAU,MAAf,UAEE,cAACZ,GAAD,IACCkJ,IAEkBH,GAAgBC,GAAmBD,IAAiBC,IACrE,cAAC,GAAD,CACEtG,cAAeA,EACfC,SAAQ,OAAEsG,QAAF,IAAEA,OAAF,EAAEA,EAAgBmB,UAC1BpT,GAAIA,EACJzJ,QAASA,IAIb,cAAC,GAAD,IAGA,qBAAK0F,MAAO,CAAEoH,SAAU,QAASgL,UAAW,QAASxE,MAAO,EAAGtG,IAAK,EAAGtF,QAAS,IAAhF,SACE,cAAC0J,GAAD,CACEpR,QAASA,EACT2C,cAAeA,GACf0O,WAAYA,EACZC,gBAAiBA,EACjB9J,MAAOA,EACP+J,UAAWA,GACXC,cAAeA,EACfC,kBAAmBA,EACnBlM,cAAeA,OAKnB,qBAAKG,MAAO,CAAEoH,SAAU,QAASgL,UAAW,OAAQ/K,KAAM,EAAGwG,OAAQ,GAAI7L,QAAS,IAAlF,SACE,cAAC,IAAD,CAAKoV,MAAM,SAASC,OAAQ,CAAC,EAAG,GAAhC,SACE,cAAC,IAAD,CAAKC,KAAM,GAAX,SAGIL,EACE,cAAC3K,GAAD,CAAQrP,cAAeA,GAAe6E,MAAOA,EAAO5C,YAAa0M,IAEjE,aGzTV6B,I,QAAS,CACbO,KAAK,GAAD,OAAKkF,IAAL,mBACJjF,MAAM,GAAD,OAAKiF,IAAL,sBAGDqE,GAAYpb,OAAOC,aAAaC,QAAQ,SAExCmb,GAAc,kEAEdC,GAAS,IAAIC,IAAa,CAC9BC,IAAKH,GACLtb,MAAO,IAAI0b,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACE,cAAC,IAAD,CAAuBO,SAAUvK,GAAQwK,aAAcV,IAAa,QAApE,SACE,cAAC,GAAD,CAAKC,YAAaA,SAGtBU,SAASC,eAAe,U,shSCwvB1BC,EAAOC,QAAU,CACf,EAAG,CACDvgB,UAAW,CACT4c,IAAK,CACHpa,QAAS,6CACTE,IA1jBO,CACb,CACE8d,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,WACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,eAER,CACEsN,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,WACNyO,KAAM,SAER,CACEsN,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,SACd5b,KAAM,MACNyO,KAAM,UAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,OACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,OACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,QACd5b,KAAM,OACNyO,KAAM,UAGVzO,KAAM,UACNyO,KAAM,SAER,CACEsN,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEuN,SAAS,EACTJ,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,WACNyO,KAAM,SAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,mBACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,kBACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,GACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVzO,KAAM,YACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,UACNkc,QAAS,CACP,CACEN,aAAc,OACd5b,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVzO,KAAM,YACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,WACNkc,QAAS,CACP,CACEN,aAAc,QACd5b,KAAM,GACNyO,KAAM,UAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,OACNkc,QAAS,CACP,CACEN,aAAc,SACd5b,KAAM,GACNyO,KAAM,WAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVzO,KAAM,SACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,SACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,UACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,QACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,SACNyO,KAAM,WAER,CACEmN,aAAc,OACd5b,KAAM,UACNyO,KAAM,QAER,CACEmN,aAAc,QACd5b,KAAM,IACNyO,KAAM,SAER,CACEmN,aAAc,UACd5b,KAAM,IACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,IACNyO,KAAM,YAGVzO,KAAM,SACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,OACNkc,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,SACNkc,QAAS,CACP,CACEN,aAAc,SACd5b,KAAM,GACNyO,KAAM,WAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,cACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,WACNkc,QAAS,CACP,CACEN,aAAc,OACd5b,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,WAER,CACEmN,aAAc,UACd5b,KAAM,MACNyO,KAAM,YAGVzO,KAAM,eACNkc,QAAS,CACP,CACEN,aAAc,OACd5b,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,UACNkc,QAAS,CACP,CACEN,aAAc,SACd5b,KAAM,GACNyO,KAAM,WAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVzO,KAAM,QACNkc,QAAS,CACP,CACEN,aAAc,UACd5b,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,cAYJ0N,IAAK,CACHxe,QAAS,6CACTE,IA5xBS,CACf,CACEoe,UAAU,EACVN,OAAQ,GACR3b,KAAM,OACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,WAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACE3b,KAAM,WACNyO,KAAM,WAER,CACEzO,KAAM,SACNyO,KAAM,YAGVzO,KAAM,UACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,cACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACE3b,KAAM,QACNyO,KAAM,WAER,CACEzO,KAAM,MACNyO,KAAM,WAER,CACEzO,KAAM,SACNyO,KAAM,YAGVzO,KAAM,eACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,WACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,UAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACE3b,KAAM,SACNyO,KAAM,YAGVzO,KAAM,YACNkc,QAAS,CACP,CACElc,KAAM,UACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,GACR3b,KAAM,SACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,WAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACE3b,KAAM,MACNyO,KAAM,WAER,CACEzO,KAAM,SACNyO,KAAM,YAGVzO,KAAM,WACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,SAGVoN,SAAS,EACTC,gBAAiB,aACjBrN,KAAM,YAER,CACEwN,UAAU,EACVN,OAAQ,CACN,CACE3b,KAAM,SACNyO,KAAM,WAER,CACEzO,KAAM,WACNyO,KAAM,YAGVzO,KAAM,YACNkc,QAAS,CACP,CACElc,KAAM,GACNyO,KAAM,YAGVoN,SAAS,EACTC,gBAAiB,OACjBrN,KAAM,YAER,CACEoN,SAAS,EACTC,gBAAiB,UACjBrN,KAAM,YAER,CACEsN,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACThc,KAAM,QACNyO,KAAM,WAER,CACEuN,SAAS,EACThc,KAAM,UACNyO,KAAM,WAER,CACEuN,SAAS,EACThc,KAAM,QACNyO,KAAM,YAGVzO,KAAM,WACNyO,KAAM,SAER,CACEsN,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACThc,KAAM,OACNyO,KAAM,WAER,CACEuN,SAAS,EACThc,KAAM,KACNyO,KAAM,WAER,CACEuN,SAAS,EACThc,KAAM,QACNyO,KAAM,YAGVzO,KAAM,WACNyO,KAAM,gB","file":"static/js/main.cc83aa8f.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      \n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };  \n\n        notify = Notify(options);\n      }\n       \n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n\n        console.log(\"Transaction Error:\", message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/llwu/viral-crowdfund-dapp\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"Tribute\"\n        subTitle=\"Viral crowdfunding DApp\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import React from \"react\";\n\nvar randomColor = require('randomcolor');\n\nconst OUTER_CIRCLE: React.CSSProperties = {\n  position: \"relative\",\n  display: \"inline-block\",\n  width: 20,\n  height: 20,\n  backgroundColor: \"#000000\",\n  borderRadius: \"50%\",\n}\n\nconst INNER_CIRCLE: React.CSSProperties = {\n  marginTop: \"25%\",\n  marginLeft: \"25%\",\n  position: \"absolute\",\n  width: \"50%\",\n  height: \"50%\",\n  backgroundColor: \"#e5e5e5\",\n  borderRadius: \"50%\",\n}\n\nconst outerCircle = (rank: number) => {\n  if (rank === 0) {\n    return { ...OUTER_CIRCLE, backgroundColor: \"#FFD700\" };\n  } else if (rank === 1) {\n    return { ...OUTER_CIRCLE, backgroundColor: \"#c0c0c0\" };\n  } else if (rank === 2) {\n    return { ...OUTER_CIRCLE, backgroundColor: \"#CD7F32\" };\n  } else {\n    return { ...OUTER_CIRCLE, backgroundColor: \"transparent\" };\n  }\n}\n\nconst innerCircle = (address: string) => {\n  return { ...INNER_CIRCLE, backgroundColor: randomColor({ seed: address.toLowerCase() }) };\n}\n\ninterface NFTSmallProps {\n  style?: React.CSSProperties;\n  rank: number;\n  address: string;\n}\n\nconst NFTSmall: React.FunctionComponent<NFTSmallProps> = (props) => {\n  const { style, rank, address } = props;\n  return (\n    <div style={{ ...outerCircle(rank), ...style }}>\n      <div style={innerCircle(address)} />\n    </div>\n  );\n}\n\nexport default NFTSmall;\n","import React from \"react\";\n\nimport NFTSmall from \"./NFTSmall\";\n\ninterface NFTLargeProps {\n  style?: React.CSSProperties;\n  rank: number;\n  address: string;\n}\n\nconst NFTLarge: React.FunctionComponent<NFTLargeProps> = (props) => {\n  const { style, rank, address } = props;\n  return <NFTSmall rank={rank} address={address} style={{ ...style, width: 250, height: 250 }} />\n}\n\nexport default NFTLarge;\n","import React, { useState } from \"react\";\n\nimport { Button, Input, Modal, Progress } from \"antd\";\nimport { FacebookOutlined, TwitterOutlined } from \"@ant-design/icons\";\nimport { ethers } from \"ethers\";\n\nimport { useContractReader } from \"src/hooks\";\nimport NFTSmall from \"src/components/NFTSmall\";\nimport NFTLarge from \"src/components/NFTLarge\";\n\nconst LEADERBOARD_SPOTS = 10;\n\ninterface DonationUIProps {\n  tx?: any;\n  readContracts?: any;\n  contract?: ethers.Contract;\n  address?: string;\n};\n\nfunction currency(str: string) {\n    if (str.includes('.')) {\n        const parts = str.split('.');\n        if (parts[1] === '0' || parts[1].length === 0) {\n          return parts[0];\n        } else if (parts[1].length === 1) {\n          return `${parts[0]}.${parts[1]}0`;\n        }\n        return parts[0] + '.' + parts[1].slice(0, 2);\n    }\n    return str;\n}\n\nconst DonationUI: React.FunctionComponent<DonationUIProps> = (props) => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const referrer = urlParams.get(\"referrer\");\n  const campaignId = urlParams.get(\"campaignId\");\n\n  const { readContracts, contract, tx, address } = props;\n  const [donationAmount, setDonationAmount] = React.useState<string>(\"\");\n  const [shareOpen, setShareOpen] = React.useState<boolean>(false);\n  const donationValid = !isNaN(Number(donationAmount)) && Number(donationAmount) > 0;\n  const openShare = () => setShareOpen(true);\n  const closeShare = () => setShareOpen(false);\n\n  let yourContribution: any = useContractReader(readContracts, \"Crowdfund\", \"contributions\", [campaignId, address]);\n  yourContribution = yourContribution && currency(ethers.utils.formatUnits(yourContribution, \"gwei\"));\n  const leaderboard: any = useContractReader(readContracts, \"Crowdfund\", \"referralLeaderboard\", [campaignId]);\n  const campaign: any = useContractReader(readContracts, \"Crowdfund\", \"campaigns\", [campaignId]);\n  const donated = campaign && currency(ethers.utils.formatUnits(campaign.balance, \"gwei\"));\n  const hasGoal = campaign?.hasGoal;\n  const goal = campaign && currency(ethers.utils.formatUnits(campaign.goal, \"gwei\"));\n  const deadline = campaign?.deadline.toString();\n  const getRank = (donor: string) => leaderboard?.addrs.findIndex(\n    (addr: string) => addr.toLowerCase() === donor?.toLowerCase()\n  );\n  const referrerRank = referrer && getRank(referrer);\n  const myRank = address && getRank(address);\n  const twitterLink = `https://twitter.com/intent/tweet?text=https%3A%2F%2Ftribute.desci.pub%2F%3FcampaignId%3D${campaignId}%26referrer%3D${address}`;\n  const fbLink = `https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Ftribute.desci.pub%2F%3FcampaignId%3D${campaignId}%26referrer%3D${address}&amp;src=sdkpreparse`;\n\n  const newButton = <Button>Create new campaign</Button>\n  const donationBox = (\n    <div>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Campaign #{Number(campaignId || -1) + 1}</h2>\n        {referrer && <>\n          Referrer: {referrer.slice(0, 10)}...\n          <NFTSmall rank={referrerRank} address={referrer} style={{ marginBottom: -5, marginLeft: 5 }} />\n        </>}\n        {hasGoal && <>\n          <hr />\n          <h4>Deadline: Block {deadline.length > 20 ? `${Number(deadline).toPrecision(20)}` : `${deadline}`}</h4>\n          <h4>${donated} raised of ${goal} goal</h4>\n          <Progress percent={100.0 * donated/goal} showInfo={false} />\n        </>}\n        <hr />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setDonationAmount(e.target.value);\n            }}\n            suffix={<Button\n              disabled={!donationValid || !tx || !contract}\n              onClick={async () => {\n                if (donationValid && tx && contract) {\n                  /* notice how you pass a call back for tx updates too */\n                  const result = tx(\n                    contract.donate(\n                      0,\n                      referrer,\n                      { value: ethers.utils.parseUnits(donationAmount, \"gwei\") },\n                    ),\n                    (update: any) => {\n                      console.log(\"📡 Transaction Update:\", update);\n                      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                        console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                        console.log(\n                          \" ⛽️ \" +\n                          update.gasUsed +\n                          \"/\" +\n                          (update.gasLimit || update.gas) +\n                          \" @ \" +\n                          parseFloat(update.gasPrice) / 1000000000 +\n                          \" gwei\",\n                        );\n                      }\n                    }\n                  );\n                  console.log(\"awaiting metamask/web3 confirm result...\", result);\n                  console.log(await result);\n                }\n              }}\n            >\n              Donate\n            </Button>}\n          />\n        </div>\n        <div>\n          <h4>Your contribution: ${yourContribution}</h4>\n          <Button onClick={openShare} disabled={!address}>Share</Button>\n          <Modal title=\"Share\" visible={shareOpen} footer={null} onCancel={closeShare}>\n          <NFTLarge\n            rank={myRank}\n            address={address || ethers.constants.AddressZero}\n            style={{ marginBottom: \"1em\" }}\n          />\n            <br />\n            <Button\n              type=\"text\"\n              icon={<TwitterOutlined style={{ color: \"#1DA1F2\", fontSize: \"1.5em\" }} />}\n              href={twitterLink}\n              target=\"_blank\"\n            />\n            <Button\n              type=\"text\"\n              icon={<FacebookOutlined style={{ color: \"#4267B2\", fontSize: \"1.5em\" }} />}\n              href={fbLink}\n              target=\"_blank\"\n            />\n          </Modal>\n        </div>\n        <hr />\n        <h3>Referral Leaderboard</h3>\n        <table style={{ width: \"100%\" }}>\n          <tr>\n            <td style={{ textAlign: \"left\" }}><h4>Address</h4></td>\n            <td style={{ textAlign: \"right\" }}><h4>Referrals Raised</h4></td>\n          </tr>\n          {leaderboard?.addrs?.filter(\n              (addr: string) => addr !== ethers.constants.AddressZero).map(\n              (addr: string, i: number) => (<tr>\n                  <td style={{ textAlign: \"left\" }}>\n                    <NFTSmall rank={i} address={addr} style={{ marginRight: 5, marginBottom: -5 }} />\n                      <a href={`https://rinkeby.etherscan.io/address/${addr}`} target=\"_blank\">\n                        {addr.slice(0, 10)}...\n                      </a>\n                  </td>\n                  <td style={{ textAlign: \"right\" }}>\n                    ${currency(ethers.utils.formatUnits(leaderboard.scores[i], \"gwei\"))}\n                  </td>\n                </tr>)\n          )}\n        </table>\n      </div>\n    </div>\n  );\n\n  return (campaign && campaign.admin !== ethers.constants.AddressZero) ? donationBox : newButton;\n};\n\nexport default DonationUI;\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Faucet, Header, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useContractLoader,\n  useExchangePrice,\n  useGasPrice,\n  useUserSigner,\n} from \"./hooks\";\nimport { DonationUI } from \"./views\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: 'coinbase',\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(\n    `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    1,\n);\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme:\"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1:`https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          100:\"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    /*torus: {\n      package: Torus,\n    },*/\n    'custom-walletlink': {\n      display: {\n        logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n        name: 'Coinbase',\n        description: 'Connect to Coinbase Wallet (not Coinbase App)',\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n  },\n});\n\n\n\nfunction App(props) {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if(injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\"){\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n\n      {!(NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) &&\n        <DonationUI\n          readContracts={readContracts}\n          contract={writeContracts?.Crowdfund}\n          tx={tx}\n          address={address}\n        />\n      }\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}